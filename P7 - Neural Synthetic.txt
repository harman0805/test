#Implement Neural Network.

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,accuracy_score,precision_score,recall_score,f1_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense 
from tensorflow.keras.optimizers import Adam

# generate synthetic data
X,y=make_classification(n_samples=1000,n_features=20,n_classes=2,random_state=42)

#Split data into train and test sets
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

#Define the neural network architecture 
model=Sequential([Dense(10,input_shape=(X_train.shape[1],),activation='relu'),Dense(8,activation='relu'),Dense(1,activation='sigmoid')])

#Compile the model
model.compile(optimizer=Adam(),loss='binary_crossentropy',metrics=['accuracy'])

#Train the model
history=model.fit(X_train,y_train,batch_size=32,epochs=50,verbose=1,validation_data=(X_test,y_test))

#Predict probabilities and labels
y_prob=model.predict(X_test)
y_pred=np.round(y_prob)

#Evaluate performance
def evaluate(y_true,y_pred,y_prob):
  #Confusion Matrix
  cm=confusion_matrix(y_true,y_pred)
  print("Confusion Matrix:")
  print(cm)

  #Accuracy
  acc = accuracy_score(y_true, y_pred)
  print("Accuracy: ", acc)

 #Precision
  precision=precision_score(y_true,y_pred,average='weighted')
  print("Precision:",precision)
  
  #Recall
  recall=recall_score(y_true,y_pred,average='weighted')
  print("Recall:",recall)

  #F1 Score
  f1=f1_score(y_true,y_pred,average='weighted')
  print("F1 Score:",f1)
evaluate(y_test,y_pred,y_prob)
#Plot training history
plt.plot(history.history['accuracy'],label='accuracy')
plt.plot(history.history['val_accuracy'],label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')
plt.show()
